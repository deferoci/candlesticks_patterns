clear
set verbose off

include yahoo_get
include "help_functions.inp"
include "patterns.inp"

# Define variables 
# ================
# path_to_bundle_stocks: bundle -> list -> name
string path_to_bundle_stocks = "D:\DocumentiD\GitHub\candlesticks_patterns\not_scripts\dj_stocks_list.json"
string results_dir = "D:\DocumentiD\gretlD\row_results_tesi"
string results_file_name = sprintf("patterns_%s.csv", strsplit(path_to_bundle_stocks,".")[1])
string intevals_file_name = sprintf("interval_%s.csv", strsplit(path_to_bundle_stocks,".")[1])


# Calculate days from 1950-1-1 to 2022-7-31 and build dataset
epochStart = epochday(1950,01,01)
epochEnd = epochday(2022,07,31)
days = dayspan(epochStart, epochEnd, 5)
nulldata days --preserve
setobs 5 "1950-01-01"
series epoch = epochday($obsdate)
bundle settings = build_settings_bundle()
functions_names = getkeys(settings.patterns)

# Perpare result file
path_to_results = results_dir ~ "\\" ~ results_file_name
path_to_inteval = results_dir ~ "\\" ~ intevals_file_name


outfile "@path_to_results" --quiet
    print_first_line()
end outfile

#Prepare interval file
outfile "@path_to_inteval" --quiet
    printf("Symbol,Start,Stop\n")
end outfile

bundle dj = bread(path_to_bundle_stocks)

loop stock_number = 1 .. nelem(stocks)
    string stock_sym = dj.list[stock_number].symbol
    list tmp_stock_prices_list = yahoo_full("@stock_sym")

    if nelem(tmp_stock_prices_list) 
        list stock_prices_list = tmp_stock_prices_list[2] 
        stock_prices_list += tmp_stock_prices_list[3] 
        stock_prices_list += tmp_stock_prices_list[4] 
        stock_prices_list += tmp_stock_prices_list[5]
        smpl stock_prices_list --no-missing

        outfile "@path_to_inteval" --quiet --append
            printf("%s,%s,%s\n", stock_sym, isodate(epoch[1],1), isodate(epoch[$nobs],1))
        end outfile
        
        outMatrix = {}

        trend_range_is_bigger_than_obs = 0
        quantile_range_is_bigger_than_obs = 0

        loop trend_range_index = 1 .. nelem(settings.trend_ranges)
            # Check trend range selected is lower than observations
            if settings.trend_ranges[trend_range_index] > $nobs
                stock_data.trend_range_num = $nobs
                trend_range_is_bigger_than_obs = 1
            else
                stock_data.trend_range_num = settings.trend_range_index[trend_range_num]
            endif


            loop quantile_range_index = 1 .. nelem(settings.quantile_ranges) 
                # Check quantile range selected is lower than observations
                if settings.quantile_ranges[quantile_range_index] > $nobs
                    stock_data.quantile_range = $nobs 
                    quantile_range_is_bigger_than_obs = 1
                else 
                    stock_data.quantile_range = settings.quantile_ranges[quantile_range_num]
                endif

                # Initialize bundle 
                bundle stock_data = null
                init(&stock_data, stock_prices_list)
                
                loop days_position_is_open = 1 .. nelem(settings.days_position_is_open_list)
                    loop foreach pattern_function functions_names
                        series temp_pattern_series = feval("$pattern_function", stock_data) 
                        loop current_obs = 1 .. $nobs
                            if ok(temp_pattern_series[current_obs]) && temp_pattern_series[current_obs] == 1
                                trend_is_bullish = settings.patterns.$pattern_function.trend
                                # Calculate returns
                                matrix tmp_M = get_returns(stock_data,current_obs,settings.days_position_is_open_list[days_position_is_open],trend_is_bullish)
                                # Append on the top of tmp_M matrix
                                tmp_M = {epoch[current_obs], settings.patterns["$pattern_function"].id, trend_range_num, quantile_range_num, days_position_is_open} ~ tmp_M
                                outMatrix = outMatrix | tmp_M
                            endif
                        endloop
                    endloop
                endloop
            if quantile_range_is_bigger_than_obs
                break
            endif
            endloop
        if trend_range_is_bigger_than_obs
            break
        endif
        endloop

        outfile "@path_to_results" --quiet --append
            print_matrix(outMatrix, stock_sym)
        end outfile

    endif

    delete stock_prices_list --force
    delete tmp_stock_prices_list --force
    delete temp_pattern_series --force

    smpl full

endloop

e = $stopwatch
print e