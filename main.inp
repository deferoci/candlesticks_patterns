set verbose off

clear

include yahoo_get
include "help_functions.inp"
include "help_functions_patterns.inp"
include "patterns.inp"

open "https://raw.githubusercontent.com/deferoci/Nasdaq100/main/nasdaq_100.csv"

strings stocks = array($nobs)

# Build stocks array
loop i=1..$nobs
    stocks[i] = CODE[i]
endloop

clear --dataset

# Calculate days from 1950-1-1 to 2022-7-31 and build dataset
epochStart = epochday(1950,01,01)
epochEnd = epochday(2022,07,31)
days = dayspan(epochStart, epochEnd, 5)

nulldata days --preserve
setobs 5 "1950-01-01"
series epoch = epochday($obsdate)

bundle settings = build_bundle_settings()
function_names = getkeys(settings.patterns)

stock_sym = stocks[1]


outfile "results_candlesticks.csv" --quiet
    print_first_line()
end outfile

outfile "stocks_interval.csv" --quiet
    printf("Symbol,Start,Stop\n")
end outfile

set stopwatch 


###################
# Set 1 for tests #
###################

loop n_stock = 1 .. 1#nelem(stocks)
    stock_sym = stocks[n_stock]
    list Lget = yahoo_full("@stock_sym")

    if nelem(Lget) 
        list L = Lget[2] Lget[3] Lget[4] Lget[5]
        smpl L --no-missing

        outfile "stocks_interval.csv" --quiet --append
            printf("%s,%s,%s\n", stock_sym, isodate(epoch[1],1), isodate(epoch[$nobs],1))
        end outfile
        
        outMatrix = {}

        loop trdR = 1 .. nelem(settings.trend_ranges)
            loop qntR = 1 .. nelem(settings.quantile_ranges) 
                
                bundle b = null
                b.trend_range = settings.trend_ranges[trdR]
                b.quantile_ranges = settings.quantile_ranges[qntR]
                init(&b, L)
                
                loop retD = 1 .. nelem(settings.return_days)
                    loop foreach funN function_names
                        series temp_series = feval("$funN", b) 
                        loop i = 1 .. $nobs
                            if ok(temp_series[i]) && temp_series[i] == 1
                                bullish = settings.patterns.$funN.trend
                                matrix M = get_return(b,i,settings.return_days[retD],bullish)
                                M = {epoch[i],settings.patterns["$funN"].id,trdR,qntR,retD} ~ M
                                outMatrix = outMatrix | M
                            endif
                        endloop
                        flush
                    endloop
                endloop
            endloop
        endloop

        outfile "results_candlesticks.csv" --quiet --append
            print_matrix(outMatrix, stock_sym)
        end outfile

    endif

    delete L --force
    delete Lget --force
    delete temp_series --force

endloop

e = $stopwatch
print e