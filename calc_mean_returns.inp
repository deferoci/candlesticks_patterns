clear
set verbose off

# Setup dataset

# Calculate days from 1950-1-1 to 2022-7-31 and build dataset
epochStart = epochday(1950,01,01)
epochEnd = epochday(2022,07,31)
days = dayspan(epochStart, epochEnd, 5)

nulldata days 
setobs 5 "1950-01-01"
series epoch = epochday($obsdate)

bundle args = null
string args.input_path = "dj.json"
string args.output_path = "mean_returns.json"


calc_mean_returns(args)

open "dj.csv"

strings stocks = array($nobs)

# Build stocks array
loop i=1..$nobs
    stocks[i] = StockSymbol[i]
endloop

clear --dataset

# Calculate days from 1950-1-1 to 2022-7-31 and build dataset
epochStart = epochday(1950,01,01)
epochEnd = epochday(2022,07,31)
days = dayspan(epochStart, epochEnd, 5)


nulldata days --preserve
setobs 5 "1950-01-01"
series epoch = epochday($obsdate)

matrix m_return_days = {5,10,15,20,40,60}
matrix all_returns = {}

loop n_stock = 1 .. nelem(stocks)
    stock_symbol = stocks[n_stock]
    list Lget = yahoo_full("@stock_symbol")

    if nelem(Lget) 
        list L = Lget[2] Lget[3] Lget[4] Lget[5]
        smpl L --no-missing
    
        matrix tmp_matrix = {}

        list temp_returns = null
        loop i = 1 .. 6
            ret = m_return_days[i]
            scalar mean_on_day = meanc(({L[2]}[ret + 1 : $nobs] ./ {L[2]}[1 : $nobs - ret]) .- 1) 
            tmp_matrix ~= {mean_on_day}
        endloop

        all_returns = all_returns | tmp_matrix


    endif

    delete L --force
    delete Lget --force
    delete temp_series --force

    flush
    # Print for flush
    printf("Done %g of %g\n",n_stock,nelem(stocks))

    smpl full
endloop

e = $stopwatch
print e
print all_returns
print meanc(all_returns)