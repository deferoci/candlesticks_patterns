# Patterns functions

function series hammer(const bundle d, scalar l[0:1:0]) 
    series isBlack = !is_white(d)
    series shortBody = is_body_short(d)
    series longBottomShadow = is_bottom_shadow_long(d)
    series shortUpShadow = top_shadow_len(d) <= (l * body_len(d))
    series trend = lag(1, d.trend) < 0
    series notDoji = !is_doji(d)
    list l_and = isBlack shortBody longBottomShadow shortUpShadow trend notDoji
    series out = and(l_and)

    set_description(&out, sprintf("Hammer - l = %g",l))

    return out 
end function

function series dark_cloud_cover(const bundle d)
    series precWhite = lag(1, is_white(d))
    series currentBlack = !is_white(d)
    series precLong = lag(1, is_body_long(d))
    series openAbovePrec = d.open > lag(1,body_top(d))
    series closeBelowMeanPrec = d.close < lag(1, mean_price(d))
    series trend = lag(2, d.trend) > 0
    series notDoji = !is_doji(d)
    list l_and = precWhite currentBlack precLong openAbovePrec closeBelowMeanPrec trend notDoji
    series out = and(l_and)

    set_description(&out, "Dark Cloud Cover")

    return out
end function

function series piercing_lines(const bundle d)
    series precBlack = lag(1, !is_white(d))
    series currentWhite = is_white(d)
    series precLong = lag(1, is_body_long(d))
    series openBelowPrec = d.open < lag(1,body_bottom(d))
    series closeAboveMeanPrec = d.close > lag(1, mean_price(d))
    series trend = lag(2, d.trend) < 0
    series notDoji = !is_doji(d)
    list l_and = precBlack currentWhite precLong openBelowPrec closeAboveMeanPrec trend notDoji
    series out = and(l_and)

    set_description(&out, "Piercing Lines")

    return out

end function

function series evening_star(const bundle d)
    series firstWhite = lag(2, is_white(d))
    series firstLong = lag(2, is_body_long(d))
    series secondBlack = !lag(1, is_white(d))
    series seconShort = lag(1, is_body_short(d))
    series lastBlack = !is_white(d)
    series lastLong = is_body_long(d)
    series gapFirstSecond = lag(2, body_top(d)) <= lag(1, body_bottom(d))
    series gapSecondLast = lag(1, body_bottom(d)) >= body_top(d)
    series trend = lag(3, d.trend) > 0
    series notDoji = !is_doji(d)
    list l_and = firstWhite firstLong secondBlack seconShort lastBlack lastLong gapFirstSecond gapSecondLast time notDoji
    out = and(l_and)

    set_description(&out, "Evening Star")

    return out
end function

function series morning_star(const bundle d)
    series firstBlack = !lag(2, is_white(d))
    series firstLong = lag(2, is_body_long(d))
    series secondBlack = !lag(1, is_white(d))
    series seconShort = lag(1, is_body_short(d))
    series lastWhite = is_white(d)
    series lastLong = is_body_long(d)
    series gapFirstSecond = lag(2, body_bottom(d)) >= lag(1, body_top(d))
    series gapSecondLast = lag(1, body_top(d)) <= body_bottom(d)
    series trend = lag(3, d.trend) < 0 
    series notDoji = !is_doji(d)
    list l_and = firstBlack firstLong secondBlack seconShort lastWhite lastLong gapFirstSecond gapSecondLast time notDoji
    out = and(l_and)

    set_description(&out, "Morning Star")    

    return out
end function

function series rising_three(const bundle d, scalar days[3::3], scalar w[::0], bool inBody[0])
    #days numero di giorni tra la prima e ultima candela bianca
    #w numero di candele bianche che possono esserci tra primo e ultimo
    series firstWhite = lag(days+1, is_white(d))
    series firstLong = lag(days+1, is_body_long(d))
    series lastWhite = is_white(d)
    series lastLong = is_body_long(d)
    series notDoji = !is_doji(d)
    list tempL = firstWhite firstLong lastWhite lastLong notDoji
    list blackCandles = null
    loop t=1..days
        series isBodyShort_$t = lag(t, is_body_short(d))
        series isBlack_$t = lag(t, !is_white(d))
        tempL += isBodyShort_$t 
        blackCandles += isBlack_$t
        if inBody
            series maxBelow_$t = lag((days + 1), body_top(d)) > lag(t, body_top(d))
            series minOver_$t = lag((days + 1), body_bottom(d)) < lag(t, body_bottom(d))
            tempL += maxBelow_$t minOver_$t
        endif
    endloop

    series nBlack = ( sum(blackCandles) >= (days - w) )
    series trend = lag(days + 2, d.trend) > 0 
    tempL += nBlack trend
    series out = and(tempL)

    set_description(&out, sprintf("Rising Three, days: %d, w: %d, inBody: %d", days, w, inBody))    

    return out
end function

function series falling_three(const bundle d, scalar days[3::3], scalar b[::0], bool inBody[0])
    # days: days between first and last black candle
    # b: max number of black candles allow between first and last
    series firstBlack = lag(days+1, !is_white(d))
    series firstLong = lag(days+1, is_body_long(d))
    series lastBlack = !is_white(d)
    series lastLong = is_body_long(d)
    series notDoji = !is_doji(d)
    list tempL = firstBlack firstLong lastBlack lastLong notDoji
    list whiteCandles = null
    loop t=1..days
        series isBodyShort_$t = lag(t, is_body_short(d))
        series isWhite_$t = lag(t, is_white(d))
        tempL += isBodyShort_$t 
        whiteCandles += isWhite_$t
        if inBody
            series maxBelow_$t = lag((days + 1), body_top(d)) > lag(t, body_top(d))
            series minOver_$t = lag((days + 1), body_bottom(d)) < lag(t, body_bottom(d))
            tempL += maxBelow_$t minOver_$t
        endif
    endloop

    series nWhite = ( sum(whiteCandles) >= (days - b) )
    series trend = lag(days + 2, d.trend) < 0
    tempL += nWhite trend 
    series out = and(tempL)

    set_description(&out, sprintf("Falling Three, days: %d, b: %d, inBody: %d", days, b, inBody))   

    return out
end function

